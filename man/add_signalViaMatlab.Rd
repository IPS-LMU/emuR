% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/emuR-add_signal.R
\name{add_signalViaMatlab}
\alias{add_signalViaMatlab}
\title{add_signalViaMatlab}
\usage{
add_signalViaMatlab(
  emuDBhandle,
  matlabFunctionName,
  outputFileExtension,
  trackName,
  trackColumn,
  oneMatlabFunctionCallPerFile = TRUE,
  inputFileExtension = NULL,
  matlabFunctionParameters = NULL,
  ...
)
}
\arguments{
\item{emuDBhandle}{The Emu database to work on.}

\item{matlabFunctionName}{Name of a Matlab function to use for signal processing.}

\item{outputFileExtension}{The file extension for the new derived signal file to be created within each bundle.}

\item{trackName}{The name of the new track that will be created automatically.}

\item{trackColumn}{The column of data to be used from the result files generated by Matlab. Should usually start with `data$`.}

\item{oneMatlabFunctionCallPerFile}{Whether to call `matlabFunctionName` once per file (TRUE) or once for the entire database (FALSE).}

\item{inputFileExtension}{The file extension of the files to operate on. Defaults to the standard media file extension of the current Emu database.}

\item{matlabFunctionParameters}{Data frame with parameters for `matlabFunctionName`. Needs to contain the columns `session` and `bundle` plus one column for each function parameter. The column names will be used as parameter names. Must contain *one row for every bundle*.}

\item{...}{}
}
\description{
Use a Matlab function to derive an extra signal file for each
bundle of the Emu database. A new track definition will be added to the
database automatically.
}
\details{
This enables EMU-SDMS users you take advantage of tool boxes and
signal processing functions written in Matlab. The Matlab function must meet
certain requirements as detailed below, and it will always be run against the
entire database.

The Matlab function must:

- Be defined in a file of its own.
- Accept named parameters.
- Accept at least the parameters `inputFilename` and `outputFilename`, both
  strings.
- Use the file at `inputFilename` and produce a new file `outputFilename`;
  the new file must be a `.mat` file containing the variables `data`,
  `sampleRate`, `startTime`, `units`, and `comment`.

The Matlab function can accept more parameters to influence the signal
processing. These parameters need not be the same values for the entire
database. They can be used, for example, to modify the signal processing
algorithms in a speaker-specific way.

If `oneMatlabFunctionCallPerFile` is `TRUE`, the function will be called once
for every bundle of the database; in that case, all parameters
to the Matlab function will be 1x1 matrices. If `oneMatlabFunctionCallPerFile`
is `FALSE`, the Matlab function will only be called once for the entire database;
in that case, all parameters will be 1xN matrices with N equal to the number
of bundles in the database. `add_signalViaMatlab` will create a temporary `.m`
script. That script may, for example, contain code like this:

... (examples)

The input file will typically be the media file of the bundle, but can be one
of the other files stored in the bundle.

The output `.mat` files that needs to be written by the Matlab function will
be converted – by `emuR` – to `.Rda` file and saved in each bundle folder with
the file extension `outputFileExtension`.

The working directory of the Matlab function will be the same as that of the
current R session, see `getwd()`.

You need a working and licensed Matlab instance on your computer. It will be
called via `matlabr::run_matlab_code()`.
}
